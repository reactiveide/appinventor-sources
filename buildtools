#!/usr/bin/env bash

DIR="$PWD/appinventor"
#check if current path is a source code
if [ -d "$DIR" ]; then
  #folder exists
  temp1="0"
else
  cd appinventor-sources
fi;
title() {
  echo -ne "\e]0;$*\a"
}

pause() {
  echo ""
  read -p "Press Enter key to continue..."
}

open_url() {
  case "$(uname -s)" in
    Darwin) open "$1" ;;
    Linux) xdg-open "$1" &> /dev/null || echo "Open $1 in your browser" ;;
  esac
}

menu() {
  until [ "$choice" = "0" ]; do
    title Build Tools for ReactiveIDE
    clear
    echo " - - What do you want to do? - - - - - - - - - - - - - - - - - - - - - - -"
    echo "   ______                     _    _               _____ ______  _____ "
    echo "   | ___ \                   | |  (_)             |_   _||  _  \|  ___|"
    echo "   | |_/ /  ___   __ _   ___ | |_  _ __   __  ___   | |  | | | || |__  "
    echo "   |    /  / _ \ / _  | / __|| __|| |\ \ / / / _ \  | |  | | | ||  __| "
    echo "   | |\ \ |  __/| (_| || (__ | |_ | | \ V / |  __/ _| |_ | |/ / | |___ "
    echo "   \_| \_| \___| \__,_| \___| \__||_|  \_/   \___| \___/ |___/  \____/ "
    echo ""
    echo "   Build Tools v1.0 (built on 19 June 2021)"
    echo ""
    echo "   System Infomation :"
    getinfo
    title Build Tools for ReactiveIDE
    echo "   "
    echo "   1.Download & Setup Source Code"
    echo "   2.Make Auth Key"
    echo "   3.Clean Build"
    echo ""
    echo "   4.Build (Full)"
    echo "   5.Build (Without Companion)"
    echo "   6.Build Companion App"
    echo "   7.Build Extension"
    echo ""
    echo "   8.Run Local Server"
    echo "   9.Run Super Dev Mode"
    echo "   10.Run Build Server"
    echo "   A.Run Tests"
    echo "   B.Doctor"
    echo "   C.Add Script to Path"
    echo "   D.Disable Auto/Uninstall Script"
    echo "   0.Exit"
    echo ""
    echo " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
    read -p "  Enter your choice:" choice
    echo ""
    case $choice in
      1) clear ; clone ; makeauthkey ; clean ; pause ;;
      2) clear ; makeauthkey ; pause ;;
      3) clear ; clean ; pause ;;
      4) clear ; build ; pause ;;
      5) clear ; buildnoplay ; pause ;;
      6) clear ; companion ; pause ;;
      7) clear ; extension ; pause ;;
      8) clear ; localserver ; pause ;;
      9) clear ; sdm ; pause ;;
      10) clear ; buildserver ; pause ;;
      a|A) clear ; tests ; pause ;;
      b|B) clear ; doctor ; pause ;;
      c|C) clear ; addtopath ; pause ;;
      d|D) clear ; removepath ; pause ;;
      0) clear ; exit 0 ;;
    esac
  done
}

getinfo() {
title Gathering System Infomation ...

#check java
printf "   Java Path : "
if type -p java; then
    _java=java
elif [[ -n "$JAVA_HOME" ]] && [[ -x "$JAVA_HOME/bin/java" ]];  then  
    _java="$JAVA_HOME/bin/java"
else
    echo "Java is not installed !"
    echo "Trying to install ..."
    if [[ $OS == 'Linux' ]]; then
     # install java
     if [ -f /etc/redhat-release ] ; then
     yum install openjdk-8-jdk
       elif [ -f /etc/SuSE-release ] ; then
     zypper install openjdk-8-jdk
       elif [ -f /etc/debian_version ] ; then 
     sudo apt install openjdk-8-jdk
       elif [ -f /etc/arch-release ] ; then
     pacman -S openjdk-8-jdk
       else
     echo "Java 8 JDK is not installed ! Please install Java 8 !"
     exit N
        fi;
     elif [[ $OS == 'Mac' ]]; then
      [[ "$(brew)" =~ "command not found" ]] && nobrew=1
      if [[ nobrew == 1 ]]; then
        #install brew
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      fi;
      brew install openjdk-8-jdk
     else
      #install java from command line not supported on such OS
         echo "Java 8 JDK is not installed ! Please install Java 8 !"
         exit N
    fi;
    fi

if [[ "$_java" ]]; then
    version=$("$_java" -version 2>&1 | awk -F '"' '/version/ {print $2}')
    if [[ "$version" > "1.8" &&  "$version" < "1.8.9" ]]; then
        echo "   Java Version : ${version}"
    else         
    echo "Java is not the right version or not installed ! Trying to install ..."
    if [[ $OS == 'Linux' ]]; then
     # install java
     if [ -f /etc/redhat-release ] ; then
     yum install openjdk-8-jdk
       elif [ -f /etc/SuSE-release ] ; then
     zypper install openjdk-8-jdk
       elif [ -f /etc/debian_version ] ; then 
     sudo apt install openjdk-8-jdk
       elif [ -f /etc/arch-release ] ; then
     pacman -S openjdk-8-jdk
       else
     echo "Java 8 JDK is not installed ! Please install Java 8 !"
     exit N
        fi;
     elif [[ $OS == 'Mac' ]]; then
      [[ "$(brew)" =~ "command not found" ]] && nobrew=1
      if [[ nobrew == 1 ]]; then
        #install brew
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      fi;
      brew install openjdk-8-jdk
     else
      #install java from command line not supported on such OS
         echo "Java 8 JDK is not installed ! Please install Java 8 !"
         exit N
    fi;
    fi
fi

#check ant
printf "   Ant Path : "
if type -p ant; then
    _ant=ant
else
    echo "Ant not installed ! Trying to install ..."
    if [[ $OS == 'Linux' ]]; then
     # install java
     if [ -f /etc/redhat-release ] ; then
     yum install ant
       elif [ -f /etc/SuSE-release ] ; then
     zypper install ant
       elif [ -f /etc/debian_version ] ; then 
     sudo apt install ant
       elif [ -f /etc/arch-release ] ; then
     pacman -S ant
       else
     echo "Apache Ant is not installed ! Please install Ant !"
     exit N
        fi;
     elif [[ $OS == 'Mac' ]]; then
      [[ "$(brew)" =~ "command not found" ]] && nobrew=1
      if [[ nobrew == 1 ]]; then
        #install brew
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      fi;
      brew install ant
     else
      #install java from command line not supported on such OS
         echo "Apache Ant is not installed ! Please install Ant !"
         exit N
    fi;
    fi;
if [[ "$_ant" ]]; then
    version=$("$_ant" -version 2>&1 | awk '/version/ {print$4}')
        echo "   Ant Version : ${version}"         
fi;
}

clone() {
title Cloning from Repo...
#begin
DIR="$PWD/appinventor"
CURRENT_DIR=0
#check if current path is a source code
if [ -d "$DIR" ]; then
  #folder exists
echo "Your current directory is ${PWD}"
while true; do
    read -p "Do you want to setup on the current directory (yes/no) ? " cudir
    case $cudir in
        [Yy]* ) CURRENT_DIR=1 break;;
        [Nn]* ) CURRENT_DIR=0 break;;
        * ) echo "Please answer yes or no.";;
    esac
done
fi

if [[ $CURRENT_DIR = 0 ]]; then
  # enter setup path
  while true; do 
  read -p "Enter Path : " DIR
  git clone https://github.com/reactiveide/appinventor-sources.git
  DIR="$DIR/appinventor"
  #check if current path is a source code
  if [ -d "$DIR" ]; then
  #folder exists
  temp1="0"
  else
  cd appinventor-sources
  fi;
  read -p "Setup will be done at ${DIR}, please confirm (yes/no) : " firmdir
  case $firmdir in
        [Yy]* ) break;;
        [Nn]* ) ;;
    esac
  done
fi
echo "Setting up ReactiveIDE on ${DIR} ..."
echo "Adding upstream repository ..."
git remote add upstream https://github.com/mit-cml/appinventor-sources.git
echo "done"
echo "Configuring git ignore ..."
cp sample-.gitignore .gitignore
echo "done"
echo "Updating submodule ..."
git submodule update --init
echo "done"
}

addtopath() {
  title Add Script to Path
  find . -maxdepth 1 -type f ! -name "*.*" -exec cp -t /usr/bin/ {} \+
  if type -p buildtools; then
  echo "Added to path successfully !"
  else
  echo "Oops! We cant do this for you! Excute this manually : cp -r buildtools /usr/bin/buildtools"
  fi
  read -p "Would you like to auto launch this script at start (yes/no)?" autolaunchcmd
    case $autolaunchcmd in
        [Yy]* ) echo "buildtools" >> ~/.bashrc ; pause ;;
        [Nn]* ) pause ;;
    esac
}

removepath() {
  title Disable Auto Run / Remove Script
  read -p "Disable Auto Run (input 1) or Remove Script (input 2)?" autolaunchcmd
    case $autolaunchcmd in
        1) sed 's,buildtools[^;]*, ,' -i ~/.bashrc ; pause ;;
        2) rm -rf /usr/bin/buildtools ; pause ;;
    esac  
}

clean() {
  title Cleaning Build...
  ant clean
}

makeauthkey() {
  title Making Auth Key...
  ant MakeAuthKey
}

build() {
  title Building...
  ant all
}

buildnoplay() {
  title Building without companion...
  ant noplay
}

companion() {
  title Building Companion...
  any PlayApp
  if [ $? -eq 0 ]; then
    echo ""
    echo The companion is generated at:
    echo $PWD/appinventor/build/buildserver/MIT AI2 Companion.apk
  fi
}

extension() {
  title Building Extension...
  ant extensions
  if [ $? -eq 0 ]; then
    echo ""
    echo The extension is generated at:
    echo $PWD/appinventor/components/build/extensions
  fi
}

localserver() {
  title Running Local Server...
  GCLOUD_SDK_LOCATION=$(gcloud --format='value(installation.sdk_root)' info)
  $GCLOUD_SDK_LOCATION/bin/java_dev_appserver.sh --port=8888 --address=0.0.0.0 appengine/build/war/
  sleep 10
  open_url http://localhost:8888
}

sdm() {
  title Running Super Dev Mode...
  open_url http://localhost:9876
  ant devmode
}

buildserver() {
  title Running Build Server...
  cd buildserver
  ant RunLocalBuildServer
}

tests() {
  title Running Tests...
  ant tests
}

doctor() {
  title Doctor
  echo Diagnosing your system...
  echo ""
  pass=0
  fail=0
  # Check if Java is installed
  if command -v java &> /dev/null; then
    ((pass++))
    echo [PASS] Java is installed.
    # Check Java version
    if java -version 2>&1 | grep -q "version \"1.8" &> /dev/null; then
      ((pass++))
      echo [PASS] Required version of Java is installed.
    else
      ((fail++))
      echo [FAIL] Required version of Java is not installed or not found on PATH.
      echo _______Please install Java 8 and try again.
    fi
  else
    ((fail++))
    echo [FAIL] Java is not installed or not found on PATH.
    echo _______Please install Java 8 and try again.
  fi
  # Check if git is installed
  if command -v git &> /dev/null; then
    ((pass++))
    echo [PASS] Git is installed.
    # Check if git submodules are present
    if git submodule status lib/blockly lib/closure-library &> /dev/null; then
      ((pass++))
      echo [PASS] Git submodules are properly set up.
    else
      ((fail++))
      echo [FAIL] Git submodules are not properly set up.
      echo _______Please run `git submodule update --init`
    fi
  else
    ((fail++))
    echo [FAIL] Git is not installed or not found on PATH.
    echo _______Please install Git and try again.
  fi
  # Check if gcloud is installed
  if command -v where gcloud &> /dev/null; then
    ((pass++))
    echo [PASS] Google Cloud SDK is installed.
  else
    ((fail++))
    echo [FAIL] Google Cloud SDK is not installed or not found on PATH.
    echo _______Download gcloud from here: https://cloud.google.com/appengine/docs/standard/java/download
  fi
  echo ""
  echo Passed $pass checks and $fail failing
}

# Run the script inside the appinventor dir
cd appinventor

if [[ $1 == "doctor" ]]; then
  doctor
else
  menu
fi
